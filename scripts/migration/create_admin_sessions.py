#!/usr/bin/env python3
"""
Script para criar sess√µes de teste para o usu√°rio admin
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.main import app
from src.models.consulta import Session, Appointment, SessionStatus
from src.models.funcionario import Funcionario
from src.models.especialidade import Especialidade
from src.models.paciente import Patient
from src.models.usuario import User
from datetime import datetime, date
from src.models.base import db

def create_admin_sessions():
    with app.app_context():
        print("=== CRIANDO SESS√ïES PARA O USU√ÅRIO ADMIN ===\n")
        
        # Verificar usu√°rio admin
        admin_user = User.query.filter_by(email="admin@consultorio.com").first()
        if not admin_user:
            print("‚ùå Usu√°rio admin n√£o encontrado!")
            return
        
        print(f"‚úÖ Usu√°rio admin encontrado: ID {admin_user.id}\n")
        
        # Verificar se j√° existem funcion√°rios para este usu√°rio
        funcionarios = Funcionario.query.filter_by(user_id=admin_user.id).all()
        
        if not funcionarios:
            print("Criando funcion√°rios para o usu√°rio admin...")
            
            # Buscar especialidades
            especialidade_medico = Especialidade.query.filter_by(nome="medico").first()
            especialidade_psicologia = Especialidade.query.filter_by(nome="Psicologia Cl√≠nica").first()
            
            if not especialidade_medico or not especialidade_psicologia:
                print("‚ùå Especialidades n√£o encontradas!")
                return
            
            # Criar funcion√°rios
            funcionario1 = Funcionario(
                nome="Dr. Admin Silva",
                user_id=admin_user.id,
                especialidade_id=especialidade_medico.id
            )
            
            funcionario2 = Funcionario(
                nome="Admin Psic√≥logo",
                user_id=admin_user.id,
                especialidade_id=especialidade_psicologia.id
            )
            
            db.session.add(funcionario1)
            db.session.add(funcionario2)
            db.session.commit()
            
            funcionarios = [funcionario1, funcionario2]
            print(f"‚úÖ Funcion√°rios criados: {len(funcionarios)}")
        else:
            print(f"‚úÖ Funcion√°rios j√° existem: {len(funcionarios)}")
        
        # Verificar se j√° existem pacientes para este usu√°rio
        pacientes = Patient.query.filter_by(user_id=admin_user.id).all()
        
        if not pacientes:
            print("Criando pacientes para o usu√°rio admin...")
            
            # Criar pacientes
            paciente1 = Patient(
                nome_completo="Carlos Admin Souza",
                telefone="(21) 99999-1111",
                email="carlos.admin@teste.com",
                data_nascimento=date(1990, 5, 15),
                user_id=admin_user.id
            )
            
            paciente2 = Patient(
                nome_completo="Maria Admin Silva",
                telefone="(21) 99999-2222",
                email="maria.admin@teste.com",
                data_nascimento=date(1985, 8, 20),
                user_id=admin_user.id
            )
            
            db.session.add(paciente1)
            db.session.add(paciente2)
            db.session.commit()
            
            pacientes = [paciente1, paciente2]
            print(f"‚úÖ Pacientes criados: {len(pacientes)}")
        else:
            print(f"‚úÖ Pacientes j√° existem: {len(pacientes)}")
        
        # Criar appointments
        today = date.today()
        
        # Appointment 1 - para hoje
        appointment1 = Appointment(
            user_id=admin_user.id,
            patient_id=pacientes[0].id,
            funcionario_id=funcionarios[0].id,
            data_primeira_sessao=datetime.combine(today, datetime.min.time().replace(hour=10)),
            quantidade_sessoes=1,
            valor_por_sessao=150.00
        )
        
        # Appointment 2 - para hoje
        appointment2 = Appointment(
            user_id=admin_user.id,
            patient_id=pacientes[1].id,
            funcionario_id=funcionarios[1].id,
            data_primeira_sessao=datetime.combine(today, datetime.min.time().replace(hour=14)),
            quantidade_sessoes=1,
            valor_por_sessao=120.00
        )
        
        db.session.add(appointment1)
        db.session.add(appointment2)
        db.session.commit()
        
        print(f"‚úÖ Appointments criados")
        
        # Criar sess√µes para hoje
        session1 = Session(
            appointment_id=appointment1.id,
            data_sessao=datetime.combine(today, datetime.min.time().replace(hour=10)),
            numero_sessao=1,
            valor=150.00,  # Campo obrigat√≥rio
            status=SessionStatus.AGENDADA
        )
        
        session2 = Session(
            appointment_id=appointment2.id,
            data_sessao=datetime.combine(today, datetime.min.time().replace(hour=14)),
            numero_sessao=1,
            valor=150.00,  # Campo obrigat√≥rio
            status=SessionStatus.AGENDADA
        )
        
        db.session.add(session1)
        db.session.add(session2)
        db.session.commit()
        
        print(f"‚úÖ Sess√µes criadas para hoje:")
        print(f"  - Sess√£o 1: {funcionarios[0].nome} ({funcionarios[0].especialidade.nome}) - {pacientes[0].nome_completo}")
        print(f"  - Sess√£o 2: {funcionarios[1].nome} ({funcionarios[1].especialidade.nome}) - {pacientes[1].nome_completo}")
        
        print("\nüéâ Sess√µes de teste criadas com sucesso para o usu√°rio admin!")

if __name__ == "__main__":
    create_admin_sessions()